namespace Gate.IO.Api.Spot;

/// <summary>
/// Spot order details
/// </summary>
public class GateSpotOrderRequest
{
    /// <summary>
    /// User defined information. If not empty, must follow the rules below:  
    /// 1. prefixed with t-
    /// 2. no longer than 28 bytes without t- prefix
    /// 3. can only include 0-9, A-Z, a-z, underscore(_), hyphen(-) or dot(.)
    /// </summary>
    [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
    public string ClientOrderId { get; set; }

    /// <summary>
    /// Currency pair
    /// </summary>
    [JsonProperty("currency_pair")]
    public string Symbol { get; set; }

    /// <summary>
    /// Order Type
    /// </summary>
    [JsonProperty("type")]
    public GateSpotOrderType Type { get; set; }

    /// <summary>
    /// Account type. spot - use spot account; margin - use margin account; cross_margin - use cross margin account. Portfolio margin account must set to &#x60;cross-margin&#x60; 
    /// </summary>
    [JsonProperty("account")]
    public GateSpotAccountType Account { get; set; }

    /// <summary>
    /// Order side
    /// </summary>
    [JsonProperty("side")]
    public GateSpotOrderSide Side { get; set; }

    /// <summary>
    /// When "type" is limit, it refers to base currency.  For instance, &#x60;BTC_USDT&#x60; means &#x60;BTC&#x60;  When &#x60;type&#x60; is &#x60;market&#x60;, it refers to different currency according to &#x60;side&#x60;  - &#x60;side&#x60; : &#x60;buy&#x60; means quote currency, &#x60;BTC_USDT&#x60; means &#x60;USDT&#x60; - &#x60;side&#x60; : &#x60;sell&#x60; means base currencyï¼Œ&#x60;BTC_USDT&#x60; means &#x60;BTC&#x60; 
    /// </summary>
    [JsonProperty("amount")]
    public decimal Amount { get; set; }

    /// <summary>
    /// Price can't be empty when "type" is limit
    /// </summary>
    [JsonProperty("price", NullValueHandling = NullValueHandling.Ignore)]
    public decimal? Price { get; set; }

    /// <summary>
    /// Time in force  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled, taker only - poc: PendingOrCancelled, makes a post-only order that always enjoys a maker fee - fok: FillOrKill, fill either completely or none Only &#x60;ioc&#x60; and &#x60;fok&#x60; are supported when &#x60;type&#x60;&#x3D;&#x60;market&#x60;
    /// </summary>
    [JsonProperty("time_in_force", NullValueHandling = NullValueHandling.Ignore)]
    public GateSpotTimeInForce? TimeInForce { get; set; }

    /// <summary>
    /// Amount to display for the iceberg order. Null or 0 for normal orders. Set to -1 to hide the order completely
    /// </summary>
    [JsonProperty("iceberg", NullValueHandling = NullValueHandling.Ignore)]
    public decimal? Iceberg { get; set; }

    /// <summary>
    /// Used in margin or cross margin trading to allow automatic loan of insufficient amount if balance is not enough.
    /// </summary>
    [JsonProperty("auto_borrow", NullValueHandling = NullValueHandling.Ignore)]
    public bool? AutoBorrow { get; set; }

    /// <summary>
    /// Enable or disable automatic repayment for automatic borrow loan generated by cross margin order. Default is disabled. Note that:  1. This field is only effective for cross margin orders. Margin account does not support setting auto repayment for orders. 2. &#x60;auto_borrow&#x60; and &#x60;auto_repay&#x60; cannot be both set to true in one order.
    /// </summary>
    [JsonProperty("auto_repay", NullValueHandling = NullValueHandling.Ignore)]
    public bool? AutoRepay { get; set; }

    /// <summary>
    /// Self-Trading Prevention Action. Users can use this field to set self-trade prevetion strategies
    /// </summary>
    [JsonProperty("stp_act", NullValueHandling = NullValueHandling.Ignore)]
    public GateSpotSelfTradingPreventionAction? SelfTradingPreventionAction { get; set; }

    /// <summary>
    /// Processing Mode
    /// </summary>
    [JsonProperty("action_mode", NullValueHandling = NullValueHandling.Ignore)]
    public GateSpotActionMode? ActionMode { get; set; }
}